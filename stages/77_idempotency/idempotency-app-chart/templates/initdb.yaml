apiVersion: batch/v1
kind: Job

metadata:
  name: "{{ .Release.Name }}"
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded

spec:
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      restartPolicy: Never
      initContainers:
        - name: check-db-ready
          image: postgres:latest
          env:
            - name: POSTGRES_HOST
              value: {{ include "postgresql.fullname" . | quote }}
            - name: POSTGRES_PORT
              value: {{ .Values.postgresql.service.port | quote }}
          command:
            - sh
            - "-c"
            - |
              until pg_isready -h $POSTGRES_HOST  -p  $POSTGRES_PORT; 
              do echo waiting for database; sleep 2; done;
      containers:
      - name: post-install-job
        env:
          - name: DATABASE_URI
            value: {{ printf "postgresql://%s:%s@%s:%s/%s" .Values.postgresql.postgresqlUsername .Values.postgresql.postgresqlPassword (include "postgresql.fullname" .) .Values.postgresql.service.port .Values.postgresql.postgresqlDatabase  | quote }}
        image: library/postgres:13.2
        command:
          - sh
          - "-c"
          - |
            psql $DATABASE_URI <<'EOF'
                DROP TABLE IF EXISTS orders;
                DROP TABLE IF EXISTS order_products;
                DROP TABLE IF EXISTS order_unique_keys;

                CREATE TABLE orders (
                  id                  SERIAL primary key,
                  create_date         TIMESTAMPTZ not null,
                  update_date         TIMESTAMPTZ not null,
                  customer_id         INTEGER not null,
                  status_code         INTEGER not null
                );

                CREATE TABLE order_products (
                  id                  SERIAL primary key,
                  order_id            INTEGER not null references orders (id) on delete cascade,
                  price               INTEGER not null,
                  quantity            INTEGER not null,
                  product_name        TEXT not null,
                  product_id          INTEGER
                );

                CREATE TABLE order_unique_keys (
                  id                  SERIAL primary key,
                  order_id            INTEGER not null references orders (id) on delete cascade,
                  unique_key          TEXT not null unique
                );
            EOF

  backoffLimit: 0
